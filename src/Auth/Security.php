<?php

    namespace imdmedia\Auth;

    use imdmedia\Data\Config;
    use imdmedia\Data\DB;
    use PHPMailer\PHPMailer\PHPMailer;
    use PHPMailer\PHPMailer\Exception;  


    class Security {
        public static function onlyLoggedInUsers() {
            session_start();
            if(!isset($_SESSION['user'])){
                header("Location: login.php");
            }
        }

        
        
        
        
        
        
        
        // sends the mail to the user with the reset link
        public static function resetRequest() {

            //generates a random string of bytes
            $token = random_bytes(32);

            //defines how long the token is valid
            $expires = date("U") + 1800;

            $conn = DB::getConnection();

            $userEmail = $_POST['email'];

            $url = "localhost:8888/PHP_eindproject/create-new-password.php?validator=" . bin2hex($token) . "&selector=" . $userEmail;
            
            $statement = $conn->prepare("DELETE FROM pwdreset WHERE pwdResetEmail=:email");
            $statement->bindValue(":email", $userEmail);
            $statement->execute();

            $options = [
                'cost' => 12,
            ];
            $tokenHash = password_hash($token, PASSWORD_DEFAULT, $options);
            
            $statementTwo = $conn->prepare("INSERT INTO pwdreset (pwdResetEmail, pwdResetToken, pwdResetExpires) VALUES (:email, :token, :expires)");
            $statementTwo->bindValue(":email", $userEmail);
            $statementTwo->bindValue(":token", $tokenHash);
            $statementTwo->bindValue(":expires", $expires);
            $statementTwo->execute();

            $mail = new PHPMailer();    
            $mail->isSMTP();
                $mail->SMTPDebug = 2;
                $mail->SMTPOptions = array(
                    'ssl' => array(
                    'verify_peer' => false,
                    'verify_peer_name' => false,
                    'allow_self_signed' => true
                 )
                );
            $config = Config::getConfig();
            $user = $config['mailuser'];
            $password = $config['mailpw'];

            $mail->Host = 'smtp.gmail.com';
            $mail->SMTPAuth = true;
            $mail->Username = $user; //paste one generated by Mailtrap
            $mail->Password = $password; //paste one generated by Mailtrap
            $mail->SMTPSecure = 'tls';
            $mail->Port = 587;
            $mail->setFrom('IMDmediaHelpdesk@gmail.com', 'IMDmediaHelpdesk');
            $mail->addAddress($userEmail);
            $mail->isHTML(true);
            $mail->Subject = 'Test Email via Mailtrap SMTP using PHPMailer';
            $mail->Body = '<p>Here is your reset link: </br><a href=' . $url . '>' . $url . '</a></p>';
            if(!$mail->send()){
                throw new Exception("Message could not be sent. Mailer Error: " . $mail->ErrorInfo);
            }else{
                header("Location: reset-password.php?reset=success");

            }
 
        }










        public static function resetPassword() {
            $conn = DB::getConnection();
            $token = $_POST['validator'];
            $userEmail = $_POST['selector'];
            $newPassword = $_POST['password'];
            $newPasswordRepeat = $_POST['passwordrepeat'];
            $statement = $conn->prepare("SELECT * FROM pwdreset WHERE pwdResetEmail=:email");
            $statement->bindValue(":email", $userEmail);
            $statement->execute();
            $user = $statement->fetch();
            $tokenHash = $user["pwdResetToken"];
            $expires = $user["pwdResetExpires"];
            $tokenBin = hex2bin($token);

            //for password check
            $uppercase = preg_match('@[A-Z]@', $newPasswordRepeat);
            $lowercase = preg_match('@[a-z]@', $newPasswordRepeat);
            $number = preg_match('@[0-9]@', $newPasswordRepeat);
            $specialChars = preg_match('@[^\w]@', $newPasswordRepeat); 

            if(password_verify($tokenBin, $tokenHash)) {
                if($expires < time()) {
                    throw new Exception("Link has expired");
                }
                else {
                    if($newPassword != $newPasswordRepeat) {
                        throw new Exception("Passwords do not match");
                    }
                    else if (empty($newPassword) || empty($newPasswordRepeat)){
                        throw new Exception("Password cannot be empty");
                    } 
                    else if(!$uppercase || !$lowercase || !$number || !$specialChars || strlen($newPasswordRepeat) < 6){
                    throw new Exception("Password must contain at least one uppercase letter, one lowercase letter, one number and one special character, and at least 6 characters");
                    }
                        $options = [
                            'cost' => 12,
                        ];
                        $newPasswordHash = password_hash($newPassword, PASSWORD_DEFAULT, $options);
                        $statement = $conn->prepare("UPDATE users SET password=:password WHERE email=:email");
                        $statement->bindValue(":password", $newPasswordHash);
                        $statement->bindValue(":email", $userEmail);
                        $statement->execute();
                        $statement = $conn->prepare("DELETE FROM pwdreset WHERE pwdResetEmail=:email");
                        $statement->bindValue(":email", $userEmail);
                        $statement->execute();

                        $statementFour = $conn->prepare("DELETE FROM pwdreset WHERE pwdResetEmail=:email");
                        $statementFour->bindValue(":email", $userEmail);
                        $statementFour->execute();

                        header("Location: login.php?pwreset=success");
                    
                }
                
                
            }
            else {
                throw new Exception("Invalid token");
            }
            
        }
        
    }
